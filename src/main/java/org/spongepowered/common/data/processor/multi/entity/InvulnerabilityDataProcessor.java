/*
 * This file is part of Sponge, licensed under the MIT License (MIT).
 *
 * Copyright (c) SpongePowered <https://www.spongepowered.org>
 * Copyright (c) contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.spongepowered.common.data.processor.multi.entity;

import com.google.common.collect.ImmutableMap;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import org.spongepowered.api.data.DataContainer;
import org.spongepowered.api.data.DataHolder;
import org.spongepowered.api.data.DataTransactionResult;
import org.spongepowered.api.data.key.Key;
import org.spongepowered.api.data.key.Keys;
import org.spongepowered.api.data.manipulator.immutable.entity.ImmutableInvulnerabilityData;
import org.spongepowered.api.data.manipulator.mutable.entity.InvulnerabilityData;
import org.spongepowered.common.bridge.data.InvulnerableTrackedBridge;
import org.spongepowered.common.data.manipulator.mutable.entity.SpongeInvulnerabilityData;
import org.spongepowered.common.data.processor.common.AbstractEntityDataProcessor;

import java.util.Map;
import java.util.Optional;

public class InvulnerabilityDataProcessor extends AbstractEntityDataProcessor<Entity, InvulnerabilityData, ImmutableInvulnerabilityData> {

    public InvulnerabilityDataProcessor() {
        super(Entity.class);
    }

    @Override
    protected boolean doesDataExist(Entity dataHolder) {
        return true;
    }

    @Override
    protected boolean set(Entity dataHolder, Map<Key<?>, Object> keyValues) {
        final int invulnerabilityTicks = (Integer) keyValues.get(Keys.INVULNERABILITY_TICKS);
        final boolean invulnerable = (Boolean) keyValues.get(Keys.INVULNERABLE);
        dataHolder.field_70172_ad = invulnerabilityTicks;
        if (dataHolder instanceof EntityLivingBase) {
            ((EntityLivingBase) dataHolder).field_70737_aN = invulnerabilityTicks;
        }
        ((InvulnerableTrackedBridge) dataHolder).bridge$setInvulnerable(invulnerable);
        return false;
    }

    @Override
    protected Map<Key<?>, ?> getValues(Entity dataHolder) {
        return ImmutableMap.<Key<?>, Object>builder()
                .put(Keys.INVULNERABILITY_TICKS, dataHolder.field_70172_ad)
                .put(Keys.INVULNERABLE, dataHolder.func_190530_aW())
                .build();
    }

    @Override
    protected InvulnerabilityData createManipulator() {
        return new SpongeInvulnerabilityData();
    }

    @Override
    public Optional<InvulnerabilityData> fill(DataContainer container, InvulnerabilityData invulnerabilityData) {
        if (container.contains(Keys.INVULNERABILITY_TICKS)) {
            invulnerabilityData.set(Keys.INVULNERABILITY_TICKS, container.getInt(Keys.INVULNERABILITY_TICKS.getQuery()).get());
        }
        if (container.contains(Keys.INVULNERABLE)) {
            invulnerabilityData.set(Keys.INVULNERABLE, container.getBoolean(Keys.INVULNERABLE.getQuery()).get());
        }
        return Optional.of(invulnerabilityData);
    }

    @Override
    public DataTransactionResult remove(DataHolder dataHolder) {
        return DataTransactionResult.failNoData();
    }

}
